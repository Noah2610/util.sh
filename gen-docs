#!/bin/bash
# Generates documentation as markdown for `util.sh`.
# Supports documenting functions, variables, and standalone meta comments.
# Documentation is generated from comments starting with `##`.

# shellcheck disable=2155

set -e

# shellcheck source=./util.sh
source "$( dirname "$0" )/util.sh"

DOCS_FILE="${ROOT}/DOCS.md"
UTIL_SH="${ROOT}/util.sh"
DOC_COMMENT="##"
TOC_MARKER="<!-- TOC -->"
# TOC_TITLE="## Table of Contents ([generated](https://github.com/Noah2610/GenTOC))"
WITH_TOC=0

check_file "$UTIL_SH"
check "pcregrep"
check "sed"


function main {
    can_gen_toc && WITH_TOC=1

    msg "Generating docs..."
    gen_docs "$@" > "$DOCS_FILE"

    if [ $WITH_TOC -eq 1 ]; then
        msg "Generating Table of Contents with $(clr "${CLR_CODE[@]}")gentoc$(clrrs)..."
        gentoc "$DOCS_FILE" -O -f "${TOC_MARKER}" -t "" -n 2
        msg "Table of Contents generated"
    fi

    msg "Docs generated: $(clr "${CLR_CODE[@]}")${DOCS_FILE}$(clrrs)"
}

function can_gen_toc {
    is_available "gentoc" || return 1
    gentoc --help &> /dev/null
}

function gen_docs {
    local doc_groups
    # argument used as nameref
    get_function_headers_with_docs doc_groups

    local meta_docs=()
    local function_docs=()
    local variable_docs=()

    local doc_group
    local doc_lines
    local doc_code
    local doc_text

    local doc_text_sep=$'  \n'

    for doc_group in "${doc_groups[@]}"; do
        local doc_text_lines_minus_offset=1

        mapfile -t doc_lines < <( \
            echo "$doc_group" \
                | sed '/^\s*$/d'
        )
        doc_code="${doc_lines[-1]}"
        if [[ $doc_code =~ ^[[:space:]]*"${DOC_COMMENT}" ]]; then
            doc_code=
            doc_text_lines_minus_offset=0
        fi
        doc_text="$(
            join_by "$doc_text_sep" \
                "${doc_lines[@]:0:${#doc_lines[@]} - ${doc_text_lines_minus_offset}}" \
                | sed 's/^\s*'"${DOC_COMMENT}"'\s\+//g'
        )"

        # META
        # TODO: These meta comments don't quite work right (doc comments without code)
        if [ -z "$doc_code" ]; then
            # Just add the comment to the markdown, without associated code.
            # A meta documentation comment of sorts.
            meta_docs+=( "${doc_text}"$'\n\n' )
            continue
        fi

        # FUNCTION
        if [[ $doc_code =~ ^\s*function ]]; then
            function_docs+=(
                '### `'"$( get_function_name_from "$doc_code" )"'()`
'"${doc_text}"
            )
            continue
        fi

        # VARIABLE
        if [[ $doc_code =~ \$[A-Z]+ ]] || [[ $doc_code =~ [A-Z]+= ]]; then
            variable_docs+=(
                '### `$'"$( get_variable_name_from "$doc_code" )"'`
'"${doc_text}"
            )
            continue
        fi

        warn "TODO: Documentation for unsupported code\n\"${doc_text}\"\n\"${doc_code}\""
    done

    local meta_md="$( join_by $'\n\n' "${meta_docs[@]}" )"
    local function_md="$( join_by $'\n\n' "${function_docs[@]}" )"
    local variable_md="$( join_by $'\n\n' "${variable_docs[@]}" )"

    local markdown_sections=()

    markdown_sections+=("${meta_md}")

    if [ $WITH_TOC -eq 1 ]; then
        markdown_sections+=(
"<details>
<summary>Table of Contents</summary>

<sub>Generated with [\`gentoc\`](https://github.com/Noah2610/GenTOC)<sub>

${TOC_MARKER}
</details>"
        )
    fi

    markdown_sections+=("---")
    markdown_sections+=("## Variables")
    markdown_sections+=("${variable_md}")
    markdown_sections+=("## Functions")
    markdown_sections+=("${function_md}")

    local markdown="$( join_by $'\n\n' "${markdown_sections[@]}" )"
    echo "${markdown}"
}

function get_function_headers_with_docs {
    # https://stackoverflow.com/a/49971213
    local -n return_doc_groups="$1"
    local lftmp="<NEWLINE>"

    mapfile -t return_doc_groups < <(
        pcregrep -MA1 \
            '(^\h*'"${DOC_COMMENT}"'[^\n]+$)+' \
            "$UTIL_SH" \
            | sed ':a;N;$!ba;s/\n/'"${lftmp}"'/g' \
            | sed 's/'"${lftmp}"'--'"${lftmp}"'/\n/g'
            # https://stackoverflow.com/a/1252191
    )

    local i
    for (( i = 0; i < ${#return_doc_groups[@]}; i++ )); do
        return_doc_groups[i]="${return_doc_groups[i]//"$lftmp"/$'\n'}"
    done
}

function get_function_name_from {
    # TODO: This only parses the function name when using this syntax:
    #           function my_func
    sed -En 's/^\s*function\s+(\w+)\s+.*$/\1/p' <<< "$1"
}

function get_variable_name_from {
    sed -En 's/^.*\b([A-Z_][A-Z_0-9]*)\b.*$/\1/p' <<< "$1"
}

main "$@"
