#!/bin/bash
# Generates a documentation markdown file for util.sh
# It documents all functions by grabbing the function names
# and their documentation comments above the their header.

# shellcheck disable=2155

set -e

# shellcheck source=./util.sh
source "./util.sh"

UTIL_SH="${ROOT}/util.sh"
DOC_COMMENT="##"

check_file "$UTIL_SH"
check "pcregrep"
check "sed"

function gen_docs {
    local doc_groups
    # argument used as nameref
    get_function_headers_with_docs doc_groups

    local markdown_sections=()
    local doc_group
    local doc_lines
    local doc_code
    local doc_text

    local doc_text_sep=$'  \n'

    for doc_group in "${doc_groups[@]}"; do
        local doc_text_lines_minus_offset=1

        mapfile -t doc_lines < <( \
            echo "$doc_group" \
                | sed '/^\s*$/d'
        )
        doc_code="${doc_lines[-1]}"
        if [[ $doc_code =~ ^[[:space:]]*"${DOC_COMMENT}" ]]; then
            doc_code=
            doc_text_lines_minus_offset=0
        fi
        doc_text="$(
            join_by "$doc_text_sep" \
                "${doc_lines[@]:0:${#doc_lines[@]} - ${doc_text_lines_minus_offset}}" \
                | sed 's/^\s*'"${DOC_COMMENT}"'\s\+//g'
        )"

        # TODO: These meta comments don't quite work right (doc comments without code)
        if [ -z "$doc_code" ]; then
            # Just add the comment to the markdown, without associated code.
            # A meta documentation comment of sorts.
            # Also append a vertical line separator.
            markdown_sections+=( "${doc_text}"$'\n\n---' )
            continue
        fi

        # FUNCTION
        if [[ $doc_code =~ ^\s*function ]]; then
            markdown_sections+=( \
                '### `function '"$( get_function_name_from "$doc_code" )"'`
'"${doc_text}"
            )

        # VARIABLE
        elif [[ $doc_code =~ \$[A-Z]+ ]] || [[ $doc_code =~ [A-Z]+= ]]; then
        # elif [[ $doc_code =~ [^A-Za-z0-9_][A-Z]+[^A-Za-z0-9_] ]]; then
            markdown_sections+=( \
                '### `$'"$( get_variable_name_from "$doc_code" )"'`
'"${doc_text}"
            )

        else
            warn "TODO: Documentation for non-function code\n\"${doc_text}\"\n\"${doc_code}\""
        fi
    done

    local markdown="$( join_by $'\n\n' "${markdown_sections[@]}" )"
    echo "${markdown}"
}

function get_function_headers_with_docs {
    # https://stackoverflow.com/a/49971213
    local -n return_doc_groups="$1"
    local lftmp="<NEWLINE>"

    mapfile -t return_doc_groups < <(
        pcregrep -MA1 \
            '(^\s*'"${DOC_COMMENT}"'[^\n]+$)+' \
            "$UTIL_SH" \
            | sed ':a;N;$!ba;s/\n/'"${lftmp}"'/g' \
            | sed 's/'"${lftmp}"'--'"${lftmp}"'/\n/g'
            # https://stackoverflow.com/a/1252191
    )

    local i
    for (( i = 0; i < ${#return_doc_groups[@]}; i++ )); do
        return_doc_groups[i]="${doc_groups[i]//"$lftmp"/$'\n'}"
    done
}

function get_function_name_from {
    # TODO: This only parses the function name when using this syntax:
    #           function my_func
    sed -En 's/^\s*function\s+(\w+)\s+.*$/\1/p' <<< "$1"
}

function get_variable_name_from {
    sed -En 's/^.+\b([A-Z]+)\b.+$$/\1/p' <<< "$1"
}

gen_docs "$@"
